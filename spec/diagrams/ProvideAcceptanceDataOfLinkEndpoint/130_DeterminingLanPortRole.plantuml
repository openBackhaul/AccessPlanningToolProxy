@startuml 130_DeterminingLanPortRole
skinparam responseMessageBelowArrow true

title
RequestForProvidingAcceptanceDataCausesDeterminingTheLanPortRole
end title

participant "LinkVis" as LinkVis
participant "APTP://v1/provide-acceptance-data-of-link-endpoint" as APTP
participant "<i>RequestForProvidingAcceptanceDataCausesReadingLtpStructure</i>" as LTPs
participant "MWDI://core-model-1-4:network-control-domain=cache/control-construct={mount-name}/logical-termination-point={uuid}/ltp-augment-1-0:ltp-augment-pac\n?fields=original-ltp-name" as ContainerName
participant "MWDI://core-model-1-4:network-control-domain=cache/control-construct={mount-name}/logical-termination-point={uuid}/layer-protocol={local-id}/vlan-interface-1-0:vlan-interface-pac/vlan-interface-configuration\n?fields=interface-kind" as PortRole
participant "MWDI://core-model-1-4:network-control-domain=cache/control-construct={mount-name}/logical-termination-point={uuid}/layer-protocol={local-id}/ethernet-container-2-0:ethernet-container-pac/ethernet-container-status\n?fields=interface-status" as PortStatus


LinkVis -> APTP: {MountName, LinkId} (apiKeyAuth)
activate APTP

LTPs --> APTP: {Uuid, LocalId, LayerProtocolName}

note over APTP
WireInterfaceUuidList = Filter List of LTPs for LayerProtocolName == WireLayer

Execute for all WireInterfaces:
ClientStructureUuid = WireInterface.ClientLtp
ClientContainerUuid = ClientStructure.ClientLtp
ClientMacInterfaceUuid = ClientContainer.ClientLtp
ClientVlanInterfaceUuid = ClientMacInterface.ClientLtp
end note

APTP -> ContainerName: {uuid = ClientContainerUuid} (apiKeyAuth)
ContainerName --> APTP: {OriginalLtpName}

APTP -> PortRole: {uuid = ClientVlanInterface} (apiKeyAuth)
PortRole --> APTP: {VlanInterfaceKind}

APTP -> PortStatus: {uuid = ClientContainerUuid} (apiKeyAuth)
PortStatus --> APTP: {interfaceStatus}

deactivate APTP

@enduml